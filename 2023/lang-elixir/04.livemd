<!-- livebook:{"file_entries":[{"file":{"file_system_id":"local","file_system_type":"local","path":"/data/aoc/2023/input/day04-e1.txt"},"name":"day04-e1.txt","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"/data/aoc/2023/input/day04.txt"},"name":"day04.txt","type":"file"}]} -->

# AoC 2023 - Day 04

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## Section

```elixir
input_e1 =
  "day04-e1.txt"
  |> Kino.FS.file_path()
  |> File.read!()
  |> String.trim()

input =
  "day04.txt"
  |> Kino.FS.file_path()
  |> File.read!()
  |> String.trim()

[input_e1, input]
```

```elixir
defmodule Solution do
  def part_1(input) do
    input
    |> String.split("\n")
    |> Enum.map(fn card ->
      [numbers, winning_numbers] = split(card)

      matches =
        numbers
        |> MapSet.intersection(winning_numbers)
        |> MapSet.size()

      if matches > 0 do
        round(:math.pow(2, matches - 1))
      else
        0
      end
    end)
    |> Enum.sum()
  end

  def part_2(input) do
    lines = String.split(input, "\n")
    cards = List.duplicate(1, length(lines))

    lines
    |> Enum.with_index()
    |> Enum.reduce(cards, fn {card, n}, acc ->
      [numbers, winning_numbers] = split(card)

      cards_won =
        numbers
        |> MapSet.intersection(winning_numbers)
        |> MapSet.size()

      range = (n + 1)..(cards_won + n)//1

      Enum.reduce(range, acc, fn i, acc ->
        List.update_at(acc, i, &(&1 + Enum.at(acc, n)))
      end)
    end)
    |> Enum.sum()
  end

  defp split(line) do
    [_card, card] = String.split(line, ":", trim: true)

    card
    |> String.split("|", trim: true)
    |> Enum.map(&String.split(&1, " ", trim: true))
    |> Enum.map(&MapSet.new/1)
  end
end
```

```elixir
Solution.part_1(input)
```

```elixir
Solution.part_2(input)
```

<!-- livebook:{"offset":1845,"stamp":{"token":"XCP.bHSEuw_nHywCHqlSSlPBLnfqS4bglrFF0YgcOWd0HfnF8Ie7peBLtSDdal75etJXdpruydcXN_njXr3TzGUNAt3CmF1xrSNU4F0XLg","version":2}} -->
