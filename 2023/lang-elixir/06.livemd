<!-- livebook:{"file_entries":[{"file":{"file_system_id":"local","file_system_type":"local","path":"/data/aoc/2023/input/day06-e1.txt"},"name":"day06-e1.txt","type":"file"},{"file":{"file_system_id":"local","file_system_type":"local","path":"/data/aoc/2023/input/day06.txt"},"name":"day06.txt","type":"file"}]} -->

# AoC 2023 - Day 06

```elixir
Mix.install([
  {:kino, "~> 0.11.3"}
])
```

## Section

```elixir
input_e1 =
  "day06-e1.txt"
  |> Kino.FS.file_path()
  |> File.read!()
  |> String.trim()

input =
  "day06.txt"
  |> Kino.FS.file_path()
  |> File.read!()
  |> String.trim()

[input_e1, input]
```

```elixir
defmodule Solution do
  def part_1(input) do
    input
    |> parse()
    |> Enum.map(fn {time, dist} ->
      calc(time, dist)
    end)
    |> Enum.product()
  end

  def part_2(input) do
    ["Time:" <> times, "Distance:" <> distances] = String.split(input, "\n")

    time = times |> String.replace(" ", "") |> String.to_integer()
    dist = distances |> String.replace(" ", "") |> String.to_integer()

    calc(time, dist)
  end

  def calc(time, dist) do
    even = if rem(time, 2) == 0, do: 1, else: 0

    (time - 1)..div(time, 2)
    |> Enum.map(&(&1 * (time - &1)))
    |> Enum.filter(&(&1 > dist))
    |> Enum.uniq()
    |> Enum.count()
    |> Kernel.*(2)
    |> Kernel.-(even)
  end

  defp parse(input) do
    ["Time:" <> times, "Distance:" <> distances] = String.split(input, "\n")

    Enum.zip(
      times |> String.split(" ", trim: true) |> Enum.map(&String.to_integer/1),
      distances |> String.split(" ", trim: true) |> Enum.map(&String.to_integer/1)
    )
  end
end
```

```elixir
Solution.part_1(input_e1)
```

```elixir
Solution.part_2(input)
```

```elixir
rem(7, 2)
```

<!-- livebook:{"offset":1720,"stamp":{"token":"XCP.jxBIVHixTnRnZKF5ssC7T9yJh-l4CJUFUzZa3P2iXY3bTHAWdbapCN7s8MqUncztZqlIejXeMDm55GiQWnxFqtI76eQ6y3sjEeC-RA","version":2}} -->
